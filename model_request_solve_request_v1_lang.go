/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package UpStudyGoSdk

import (
	"encoding/json"
	"fmt"
)

// RequestSolveRequestV1Lang Output language enumeration values
type RequestSolveRequestV1Lang string

// List of request_SolveRequestV1_lang
const (
	EN RequestSolveRequestV1Lang = "EN"
	RU RequestSolveRequestV1Lang = "RU"
	PT RequestSolveRequestV1Lang = "PT"
	ES RequestSolveRequestV1Lang = "ES"
	HI RequestSolveRequestV1Lang = "HI"
	FR RequestSolveRequestV1Lang = "FR"
	PL RequestSolveRequestV1Lang = "PL"
	KO RequestSolveRequestV1Lang = "KO"
	JA RequestSolveRequestV1Lang = "JA"
	ZHS RequestSolveRequestV1Lang = "ZHS"
	ZHT RequestSolveRequestV1Lang = "ZHT"
	VI RequestSolveRequestV1Lang = "VI"
	IT RequestSolveRequestV1Lang = "IT"
	DE RequestSolveRequestV1Lang = "DE"
)

// All allowed values of RequestSolveRequestV1Lang enum
var AllowedRequestSolveRequestV1LangEnumValues = []RequestSolveRequestV1Lang{
	"EN",
	"RU",
	"PT",
	"ES",
	"HI",
	"FR",
	"PL",
	"KO",
	"JA",
	"ZHS",
	"ZHT",
	"VI",
	"IT",
	"DE",
}

func (v *RequestSolveRequestV1Lang) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestSolveRequestV1Lang(value)
	for _, existing := range AllowedRequestSolveRequestV1LangEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestSolveRequestV1Lang", value)
}

// NewRequestSolveRequestV1LangFromValue returns a pointer to a valid RequestSolveRequestV1Lang
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestSolveRequestV1LangFromValue(v string) (*RequestSolveRequestV1Lang, error) {
	ev := RequestSolveRequestV1Lang(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestSolveRequestV1Lang: valid values are %v", v, AllowedRequestSolveRequestV1LangEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestSolveRequestV1Lang) IsValid() bool {
	for _, existing := range AllowedRequestSolveRequestV1LangEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to request_SolveRequestV1_lang value
func (v RequestSolveRequestV1Lang) Ptr() *RequestSolveRequestV1Lang {
	return &v
}

type NullableRequestSolveRequestV1Lang struct {
	value *RequestSolveRequestV1Lang
	isSet bool
}

func (v NullableRequestSolveRequestV1Lang) Get() *RequestSolveRequestV1Lang {
	return v.value
}

func (v *NullableRequestSolveRequestV1Lang) Set(val *RequestSolveRequestV1Lang) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestSolveRequestV1Lang) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestSolveRequestV1Lang) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestSolveRequestV1Lang(val *RequestSolveRequestV1Lang) *NullableRequestSolveRequestV1Lang {
	return &NullableRequestSolveRequestV1Lang{value: val, isSet: true}
}

func (v NullableRequestSolveRequestV1Lang) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestSolveRequestV1Lang) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

