/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package UpStudyGoSdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RequestSolveRequestV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestSolveRequestV1{}

// RequestSolveRequestV1 struct for RequestSolveRequestV1
type RequestSolveRequestV1 struct {
	// Mathematical expression input, must be in Latex format, e.g., \\frac{x+1}{2} \\leq 0
	Input string `json:"input"`
	Lang *RequestSolveRequestV1Lang `json:"lang,omitempty"`
}

type _RequestSolveRequestV1 RequestSolveRequestV1

// NewRequestSolveRequestV1 instantiates a new RequestSolveRequestV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestSolveRequestV1(input string) *RequestSolveRequestV1 {
	this := RequestSolveRequestV1{}
	this.Input = input
	return &this
}

// NewRequestSolveRequestV1WithDefaults instantiates a new RequestSolveRequestV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestSolveRequestV1WithDefaults() *RequestSolveRequestV1 {
	this := RequestSolveRequestV1{}
	return &this
}

// GetInput returns the Input field value
func (o *RequestSolveRequestV1) GetInput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *RequestSolveRequestV1) GetInputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *RequestSolveRequestV1) SetInput(v string) {
	o.Input = v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *RequestSolveRequestV1) GetLang() RequestSolveRequestV1Lang {
	if o == nil || IsNil(o.Lang) {
		var ret RequestSolveRequestV1Lang
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestSolveRequestV1) GetLangOk() (*RequestSolveRequestV1Lang, bool) {
	if o == nil || IsNil(o.Lang) {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *RequestSolveRequestV1) HasLang() bool {
	if o != nil && !IsNil(o.Lang) {
		return true
	}

	return false
}

// SetLang gets a reference to the given RequestSolveRequestV1Lang and assigns it to the Lang field.
func (o *RequestSolveRequestV1) SetLang(v RequestSolveRequestV1Lang) {
	o.Lang = &v
}

func (o RequestSolveRequestV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestSolveRequestV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["input"] = o.Input
	if !IsNil(o.Lang) {
		toSerialize["lang"] = o.Lang
	}
	return toSerialize, nil
}

func (o *RequestSolveRequestV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"input",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestSolveRequestV1 := _RequestSolveRequestV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestSolveRequestV1)

	if err != nil {
		return err
	}

	*o = RequestSolveRequestV1(varRequestSolveRequestV1)

	return err
}

type NullableRequestSolveRequestV1 struct {
	value *RequestSolveRequestV1
	isSet bool
}

func (v NullableRequestSolveRequestV1) Get() *RequestSolveRequestV1 {
	return v.value
}

func (v *NullableRequestSolveRequestV1) Set(val *RequestSolveRequestV1) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestSolveRequestV1) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestSolveRequestV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestSolveRequestV1(val *RequestSolveRequestV1) *NullableRequestSolveRequestV1 {
	return &NullableRequestSolveRequestV1{value: val, isSet: true}
}

func (v NullableRequestSolveRequestV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestSolveRequestV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


