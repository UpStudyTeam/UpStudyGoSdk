/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package UpStudyGoSdk

import (
	"encoding/json"
	"fmt"
)

// SolverDescriptionFormat Format of the content: txt (text) / latex (latex)
type SolverDescriptionFormat string

// List of solver_Description_format
const (
	TXT SolverDescriptionFormat = "txt"
	LATEX SolverDescriptionFormat = "latex"
)

// All allowed values of SolverDescriptionFormat enum
var AllowedSolverDescriptionFormatEnumValues = []SolverDescriptionFormat{
	"txt",
	"latex",
}

func (v *SolverDescriptionFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SolverDescriptionFormat(value)
	for _, existing := range AllowedSolverDescriptionFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SolverDescriptionFormat", value)
}

// NewSolverDescriptionFormatFromValue returns a pointer to a valid SolverDescriptionFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSolverDescriptionFormatFromValue(v string) (*SolverDescriptionFormat, error) {
	ev := SolverDescriptionFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SolverDescriptionFormat: valid values are %v", v, AllowedSolverDescriptionFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SolverDescriptionFormat) IsValid() bool {
	for _, existing := range AllowedSolverDescriptionFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to solver_Description_format value
func (v SolverDescriptionFormat) Ptr() *SolverDescriptionFormat {
	return &v
}

type NullableSolverDescriptionFormat struct {
	value *SolverDescriptionFormat
	isSet bool
}

func (v NullableSolverDescriptionFormat) Get() *SolverDescriptionFormat {
	return v.value
}

func (v *NullableSolverDescriptionFormat) Set(val *SolverDescriptionFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableSolverDescriptionFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableSolverDescriptionFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSolverDescriptionFormat(val *SolverDescriptionFormat) *NullableSolverDescriptionFormat {
	return &NullableSolverDescriptionFormat{value: val, isSet: true}
}

func (v NullableSolverDescriptionFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSolverDescriptionFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

